//DFS
class Solution {
    void dfs(char[][] grid, int x, int y) {
        int rows = grid.length, cols = grid[0].length;
        if (x >= 0 && y >= 0 && x < rows && y < cols && grid[x][y] == '1') {
            grid[x][y] = '0';
            dfs(grid, x - 1, y);
            dfs(grid, x + 1, y);
            dfs(grid, x, y - 1);
            dfs(grid, x, y + 1);
        }
    }

    public int numIslands(char[][] grid) {
        int rows = grid.length, cols = grid[0].length, nums = 0;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (grid[i][j] == '1') {
                    dfs(grid, i, j);
                    nums++;
                }
            }
        }
        return nums;
    }
}
/*//BFS
class Solution {
    public int numIslands(char[][] grid) {

    }
}*/

//runtime:2 ms
//memory:51.8 MB
