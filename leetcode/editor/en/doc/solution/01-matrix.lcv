[TOC]

## Solution

---

#### Approach 1: Brute force [Time Limit Exceeded]

**Intuition**

Let's start with the most intuitive approach, and do exactly what the question asks us to do: for each cell, find the distance of the closest zero.

**Algorithm**

* Initialize `dist[i][j]=INT_MAX` for all `{i,j}` cells.
* Iterate over the matrix.
  + If cell is `0`, `dist[i][j]=0`,
  + Otherwise, for each `1` cell,
    - Iterate over the entire matrix
    - If the cell is `0`, calculate its distance from current cell as `abs(k-i) + abs(l-j)`.
    - If the distance is smaller than the current distance, update it.

**Implementation**

<iframe src="https://leetcode.com/playground/gDD5Nyf5/shared" frameBorder="0" width="100%" height="500" name="gDD5Nyf5"></iframe>

**Complexity Analysis**

* Time complexity: $O((r \cdot c)^2)$

  Iterating over the entire matrix for each `1` in the matrix.

* Space complexity: $O(1)$

  No extra space is required other than the space used to store the output (`dist`), and the output does not count towards the space complexity.

---

#### Approach 2: Using BFS

**Intuition**

*A better brute force*:
Looking over the entire matrix appears wasteful and hence, we can use Breadth First Search (BFS) to limit the search to the nearest `0` found for each `1`. As soon as a `0` appears during the BFS, we know that the `0` is the closest, and hence, we move to the next `1`.

*Think again*:
But, in this approach, we will only be able to update the distance of one `1` using one BFS, which could in fact, result in slightly higher complexity than the brute force approach.
But hey, this could be optimized if we start the BFS from `0`s and thereby, updating the distances of all the `1`s in the path.

**Algorithm**

* For our BFS routine, we keep a queue, `q` to maintain the queue of cells to be examined next.
* We start by adding all the cells with `0`s to `q`.
* Intially, distance for each `0` cell is `0` and distance for each `1` is `INT_MAX`, which is updated during the BFS.
* Pop the cell from queue, and examine its neighbors. If the new calculated distance for neighbor `{i,j}` is smaller, we add `{i,j}` to `q` and update `dist[i][j]`.

**Implementation**

<iframe src="https://leetcode.com/playground/EQ5d4je2/shared" frameBorder="0" width="100%" height="500" name="EQ5d4je2"></iframe>

**Complexity Analysis**

* Time complexity: $O(r \cdot c)$

  Since, the new cells are added to the queue only if their current distance is greater than the calculated distance, cells are not likely to be added multiple times.

* Space complexity: $O(r \cdot c)$

  An additional $O(r \cdot c)$ space is required to maintain the queue.

---

#### Approach 3: Dynamic Programming

**Intuition**

The distance of a cell from `0` can be calculated if we know the nearest distance for all the neighbors, in which case the distance is the minimum distance of any neighbor + 1. And, instantly, the words that come to mind are Dynamic Programming (DP)!!  
From each `1`, the minimum path to `0` could be in any direction. So, we need to check all the 4 directions. In one iteration from top to bottom, we can check left and top directions, and we need another iteration from bottom to top to check for right and bottom directions.

**Algorithm**

* Iterate over the matrix from top to bottom-left to right:
  + Update
    $\text{dist}[i][j]=\min(\text{dist}[i][j],\min(\text{dist}[i][j-1],\text{dist}[i-1][j])+1)$
    i.e., minimum of the current dist and distance from top or left neighbor +1, that would have been already calculated previously in the current iteration.
* Now, we need to do the back iteration in the similar manner: from bottom to top-right to left:
  + Update
    $\text{dist}[i][j]=\min(\text{dist}[i][j],\min(\text{dist}[i][j+1],\text{dist}[i+1][j])+1)$
    i.e. minimum of current dist and distances calculated from bottom and right neighbors, that would be already available in current iteration.

**Implementation**

<iframe src="https://leetcode.com/playground/8MLJQxGr/shared" frameBorder="0" width="100%" height="500" name="8MLJQxGr"></iframe>

**Complexity Analysis**

* Time complexity: $O(r \cdot c)$

  We perform two passes over the matrix and each pass requires $O(r \cdot c)$ time.

* Space complexity: $O(1)$

  No extra space is required other than the space used to store the output (`dist`), and the output does not count towards the space complexity.

